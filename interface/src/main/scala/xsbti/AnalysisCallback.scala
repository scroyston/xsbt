package xsbti

import api.Source
import java.io.File

trait AnalysisCallback {
  /** The names of classes that the analyzer should find subclasses of. */
  def superclassNames: Array[String]

  /** The names of annotations that the analyzer should look for on methods and classes. */
  def annotationNames: Array[String]

  /** Called when the the given superclass could not be found on the classpath by the compiler. */
  def superclassNotFound(superclassName: String): Unit

  /** Called before the source at the given location is processed. */
  def beginSource(source: File): Unit

  /** Called when the a subclass of one of the classes given in <code>superclassNames</code> is
    * discovered. */
  def foundSubclass(source: File, subclassName: String, superclassName: String, isModule: Boolean): Unit

  /** Called when an annotation with name <code>annotationName</code> is found on a class or one of its methods. */
  def foundAnnotated(source: File, className: String, annotationName: String, isModule: Boolean): Unit

  /** Called to indicate that the source file <code>source</code> depends on the source file
    * <code>dependsOn</code>.  Note that only source files included in the current compilation will
    * passed to this method.  Dependencies on classes generated by sources not in the current compilation will
    * be passed as class dependencies to the classDependency method. */
  def sourceDependency(dependsOn: File, source: File): Unit

  /** Called to indicate that the source file <code>source</code> depends on the jar
    * <code>jar</code>. */
  def jarDependency(jar: File, source: File): Unit

  /** Called to indicate that the source file <code>source</code> depends on the class file
    * <code>clazz</code>. */
  def classDependency(clazz: File, source: File): Unit

  /** Called to indicate that the source file <code>source</code> produces a class file at
    * <code>module</code>. */
  def generatedClass(source: File, module: File): Unit

  /** Called after the source at the given location has been processed. */
  def endSource(sourcePath: File): Unit

  /** Called when a module with a public 'main' method with the right signature is found. */
  def foundApplication(source: File, className: String): Unit

  /** Called when the public API of a source file is extracted. */
  def api(sourceFile: File, source: Source): Unit
}